@model Vidly.ViewModels.GenreListViewModel
    
@using Telerik.Reporting
@using Telerik.ReportViewer.Mvc

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title>Telerik MVC HTML5 Report Viewer</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />

    <script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>

    <link href="http://kendo.cdn.telerik.com/2015.3.930/styles/kendo.common.min.css" rel="stylesheet" />
    <link href="http://kendo.cdn.telerik.com/2015.3.930/styles/kendo.blueopal.min.css" rel="stylesheet" />

    <!--kendo.web.min.js or kendo.all.min.js can be used as well instead of the following custom Kendo UI-->
    <script src="@Url.Content("~/ReportViewer/js/kendo.subset.2015.3.930.min.js")"></script>

    <style>
        #reportViewer1 {
            position: relative;
            width: 1300px;
            height: 900px;
            font-family: Verdana, Arial;
        }
    </style>

    <script src="@Url.Content("~/ReportViewer/js/telerikReportViewer-10.2.16.1025.min.js")"></script>

</head>

@using (Html.BeginForm("SelectGenre", "Movies"))
{
    <div class="form-group">
        <!--The dropdown list is linked to the MembershipTypeId,
        The value for MembershipTypeId will be selected from Membershiptypes,
        SelectList is instructing the dropdown list to be populated with the data from Model.MembershipTypes to take the Id field as it's value but to display the associated Name in the dropdown list
        "Select Membership Type" is an additional value for the dropdown list that will be the default value-->
        <br />
        @Html.DropDownListFor(g => g.Genres, new SelectList(Model.Genres, "Id", "GenreType"), "Select Genre Type", new { @class = "form-control" })
        <button type="submit" class="btn btn-primary">Update</button>
    </div>
}

<body>

@(Html.TelerikReporting().ReportViewer()
        // Each report viewer must have an id - it will be used by the initialization script
        // to find the element and initialize the report viewer.
        .Id("reportViewer1")
        // The URL of the service which will serve reports.
        // The URL corresponds to the name of the controller class (ReportsController).
        // For more information on how to configure the service please check http://www.telerik.com/help/reporting/telerik-reporting-rest-conception.html.
        .ServiceUrl(Url.Content("/api/reports"))
        // The URL for the report viewer template. The template can be edited -
        // new functionalities can be added and unneeded ones can be removed.
        // For more information please check http://www.telerik.com/help/reporting/html5-report-viewer-templates.html.
        // .TemplateUrl(Url.Content("/ReportViewer/templates/telerikReportViewerTemplate-10.2.16.1025.html"))
        // Strongly typed ReportSource - TypeReportSource or UriReportSource.
        .ReportSource(new UriReportSource() { Uri = "MoviesInStockReport.trdp" })
        // Specifies whether the viewer is in interactive or print preview mode.
        // PrintPreview - Displays the paginated report as if it is printed on paper. Interactivity is not enabled.
        // Interactive - Displays the report in its original width and height with no paging. Additionally interactivity is enabled.
        .ViewMode(ViewMode.Interactive)
        // Sets the scale mode of the viewer.
        // Three modes exist currently:
        // FitPage - The whole report will fit on the page (will zoom in or out), regardless of its width and height.
        // FitPageWidth - The report will be zoomed in or out so that the width of the screen and the width of the report match.
        // Specific - Uses the scale to zoom in and out the report.
        .ScaleMode(ScaleMode.Specific)
        // Zoom in and out the report using the scale
        // 1.0 is equal to 100%, i.e. the original size of the report
        .Scale(1.0)
        // Sets whether the viewer’s client session to be persisted between the page’s refreshes(ex. postback).
        // The session is stored in the browser’s sessionStorage and is available for the duration of the page session.
        .PersistSession(false)
        // Sets the print mode of the viewer.
        .PrintMode(PrintMode.AutoSelect)
)

</body>
</html>